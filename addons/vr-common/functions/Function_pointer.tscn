[gd_scene load_steps=4 format=2]

[ext_resource path="res://addons/vr-common/materials/pointer.tres" type="Material" id=1]

[sub_resource type="GDScript" id=1]
script/source = "\"res://addons/vr-common/functions/Function_pointer.tscn\"extends Spatial

var target = null
var last_collided_at = Vector3(0, 0, 0)
var laser_y = -0.05
onready var ws = ARVRServer.world_scale

func set_enabled(p_enabled):
	$Laser.visible = p_enabled
	$Laser/RayCast.enabled = p_enabled

func _on_button_pressed(p_button):
	if p_button == 15 and $Laser/RayCast.enabled:
		if $Laser/RayCast.is_colliding():
			target = $Laser/RayCast.get_collider()
			last_collided_at = $Laser/RayCast.get_collision_point()
			# print(\"Button pressed on \" + target.get_name() + \" at \" + str(last_collided_at))
			if target.has_method(\"_on_pointer_pressed\"):
				target._on_pointer_pressed(last_collided_at)

func _on_button_release(p_button):
	if p_button == 15 and target:
		# let object know button was released
		# print(\"Button released on \" + target.get_name())
		if target.has_method(\"_on_pointer_release\"):
			target._on_pointer_release(last_collided_at)

		target = false
		last_collided_at = Vector3(0, 0, 0)

func _ready():
	# Get button press feedback from our parent (should be an ARVRController)
	get_parent().connect(\"button_pressed\", self, \"_on_button_pressed\")
	get_parent().connect(\"button_release\", self, \"_on_button_release\")
	
	# apply our world scale to our laser position
	$Laser.translation.y = laser_y * ws

func _process(delta):
	var new_ws = ARVRServer.world_scale
	if (ws != new_ws):
		ws = new_ws
	$Laser.translation.y = laser_y * ws
	
	if $Laser/RayCast.enabled and $Laser/RayCast.is_colliding():
		var new_at = $Laser/RayCast.get_collision_point()
		var new_target = $Laser/RayCast.get_collider()
		
		if new_at == last_collided_at:
			pass
		elif target:
			# if target is set our mouse must be down, we keep sending events to our target
			if target.has_method(\"_on_pointer_moved\"):
				target._on_pointer_moved(new_at, last_collided_at)
		else:
			if new_target.has_method(\"_on_pointer_moved\"):
				new_target._on_pointer_moved(new_at, last_collided_at)
		
		last_collided_at = new_at

"

[sub_resource type="CubeMesh" id=2]
material = ExtResource( 1 )
size = Vector3( 0.002, 0.002, 10 )
subdivide_depth = 20

[node name="Function_pointer" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 0, 0 )
script = SubResource( 1 )

[node name="Laser" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.05, -5 )
cast_shadow = 0
mesh = SubResource( 2 )
material/0 = null

[node name="RayCast" type="RayCast" parent="Laser"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5 )
enabled = true
cast_to = Vector3( 0, 0, -10 )

